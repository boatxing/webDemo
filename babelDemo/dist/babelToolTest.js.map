{"version":3,"sources":["../src/babelToolTest.js"],"names":["code","console","info","a","output","sourceMaps","result"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAIA,IAAI,6DAAR;AAIAC,OAAO,CAACC,IAAR,CAAa,YAAb,EAA2BF,IAA3B,E,CAEA;;AACA,IAAMG,CAAC,GAAG,mBAAMH,IAAN,CAAV;AACAC,OAAO,CAACC,IAAR,CAAa,kBAAb,EAAiCC,CAAjC,E,CAEA;;AACA,IAAMC,MAAM,GAAG,wBAASD,CAAT,EAAY;AAAEE,EAAAA,UAAU,EAAE;AAAd,CAAZ,EAAkCL,IAAlC,CAAf;AACAC,OAAO,CAACC,IAAR,CAAa,qBAAb,EAAoCE,MAApC,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,OAAO,CAACC,IAAR,CAAa,sBAAb,EAAqCI,MAAM,CAACN,IAA5C","sourcesContent":["import { transform } from \"@babel/core\";\nimport { parse } from \"@babel/parser\";\nimport generate from '@babel/generator';\nimport types from '@babel/types';\n\nlet code =\n    `codes.map(code=>{\n\t   return code.toUpperCase()\n   })`\nconsole.info(\"=====code:\", code);\n\n// 转换代码为ast树\nconst a = parse(code)\nconsole.info(\"=====parse test:\", a);\n\n// 转换ast语法书为代码字符串\nconst output = generate(a, { sourceMaps: true }, code);\nconsole.info(\"=====generate test:\", output)\n\n//visitor可以对特定节点进行处理\n// let visitor = {\n//     t.arrowFunctionExpression(path) {//定义需要转换的节点,这里拦截箭头函数\n//         let params = path.node.params\n//         let blockStatement = path.node.body\n//         //使用babel-types的functionExpression方法生成新节点\n//         let func = types.functionExpression(null, params, blockStatement, false, false)\n//         //替换节点\n//         path.replaceWith(func) //\n//     }\n// }\n//\n// let result = transform(code, {\n//     plugins: [\n//         visitor\n//     ]\n// });\n\nconsole.info('=====transform test:', result.code);\n"],"file":"babelToolTest.js"}